name: release-flow

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version - in the form of 1.2.3'
        required: true
        type: string

# ToDo: adapt names
env:
  # This variable is used to name release output files.
  GAME_EXECUTABLE_NAME: bevy_game
  GAME_OSX_APP_NAME: BevyGame
  binary: bevy_game
  add_binaries_to_github_release: true
  itch_target: jclevin/bevy_game

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  build-macOS:
    runs-on: macos-latest
    needs: get-version
    env:
      # macOS 11.0 Big Sur is the first version to support universal binaries
      MACOSX_DEPLOYMENT_TARGET: 11.0
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Remove build script
        run: |
          rm build.rs
      - name: Install rust toolchain for Apple Silicon
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: aarch64-apple-darwin
      - name: Build release for Apple Silicon
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) cargo build --profile dist --target=aarch64-apple-darwin
      - name: Install rust toolchain for Apple x86
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: x86_64-apple-darwin
      - name: Build release for x86 Apple
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) cargo build --profile dist --target=x86_64-apple-darwin
      - name: Create Universal Binary
        run: |
          lipo -create -output target/dist/${{ env.GAME_EXECUTABLE_NAME }} target/aarch64-apple-darwin/dist/${{ env.GAME_EXECUTABLE_NAME }} target/x86_64-apple-darwin/dist/${{ env.GAME_EXECUTABLE_NAME }}
      - name: Create release
        run: |
          mkdir -p build/macos/src/Game.app/Contents/MacOS/assets
          cp -r assets/ build/macos/src/Game.app/Contents/MacOS/assets
          cp -r credits/ build/macos/src/Game.app/Contents/MacOS/credits
          cp target/dist/${{ env.GAME_EXECUTABLE_NAME }} build/macos/src/Game.app/Contents/MacOS/
          mv build/macos/src/Game.app build/macos/src/${{ env.GAME_OSX_APP_NAME }}.app
          ln -s /Applications build/macos/src/
          hdiutil create -fs HFS+ -volname "${{ env.GAME_OSX_APP_NAME }}" -srcfolder build/macos/src ${{ env.GAME_EXECUTABLE_NAME }}.dmg
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}.dmg
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_macOS.dmg
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  build-linux:
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Build release
        run: |
          cargo build --profile dist
      - name: Prepare release
        run: |
          chmod +x target/dist/${{ env.GAME_EXECUTABLE_NAME }}
          mv target/dist/${{ env.GAME_EXECUTABLE_NAME }} .
      - name: Bundle release
        run: |
          tar -czf ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz ${{ env.GAME_EXECUTABLE_NAME }} assets credits
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_linux.tar.gz
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  build-windows:
    runs-on: windows-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
      BUILD_INSTALLER: ${{ false }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install dotnet
        if: ${{ env.BUILD_INSTALLER }}
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: build/windows/installer/global.json
      - name: Build release
        run: |
          cargo build --profile dist
      - name: Prepare release
        run: |
          mkdir target/dist/assets && cp -r assets target/dist/assets
          mkdir target/dist/credits && cp -r credits target/dist/credits
      - name: Zip release
        uses: vimtor/action-zip@v1.1
        with:
          files: target/dist/assets/ target/dist/credits/ target/dist/${{ env.GAME_EXECUTABLE_NAME }}.exe
          dest: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
      - name: Create Installer
        if: ${{ env.BUILD_INSTALLER }}
        run: dotnet build -p:Version=${{ env.VERSION }} -c Release build/windows/installer/Installer.wixproj --output installer
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.zip
          tag: ${{ env.VERSION }}
          overwrite: true
      - name: Upload installer
        if: ${{ env.BUILD_INSTALLER }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: installer/en-US/installer.msi
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.msi
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  build-wasm:
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown
      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ env.binary }}.wasm
          cp -r assets wasm/
      - name: Package as a zip
        working-directory: ./wasm
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: wasm
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-wasm-${{ env.VERSION }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$itch_target" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT
          fi






  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - check-if-upload-to-itch-is-configured
      - build-wasm
      - build-linux
      - build-windows
      - build-macOS
      - get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./builds
      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ env.VERSION }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
          done